#include <stdio.h>
#include <stdlib.h>
#define MAX 301

/* CODIGO DESENVOLVIDO PARA FINS DE EXERCICIO EM PROGRAMAÇÃO - URI ONLINE
*  ALUNO: FRANCISCO PIRES JUNIOR
*  CURSO: CIÊNCIA DA COMPUTAÇÃO - UNIVERSIDADE FEDERAL DE RORAIMA
*/


typedef struct pilha{
    int topo;
    char vet[MAX];
}Pilha;

Pilha *criaPilha()
{
    Pilha *p = (Pilha *)malloc(sizeof(Pilha));
    p->topo = 0;
    return p;
}
void liberaPilha(Pilha *p)
{
    free(p);
}
int pilhaCheia(Pilha *p)
{
    return p->topo == MAX;
}
int pilhaVazia(Pilha *p)
{
    return p->topo == 0;
}
char empilha(Pilha *p,char c)
{
    if(pilhaCheia(p))
    {
        return 0;
    }
    else
    {
        p->vet[p->topo] = c;
        p->topo++;
    }
}
void desempilha(Pilha *p)
{
    if(pilhaVazia(p))
    {
        return 0;
    }
    else{
        p->topo--;
    }
}
int prioridade(char c, char h)
{
    int pc,ph;

    if(c == '^')
        pc = 4;
    else if(c == '*' || c == '/')
        pc = 2;
    else if(c == '+' || c == '-')
        pc = 1;
    else if(c == '(')
        pc = 4;

    if(h == '^')
        ph = 3;
    else if(h == '*' || h == '/')
        ph = 2;
    else if(h == '+' || h == '-')
        ph = 1;
    else if(h == '(')
        ph = 0;

    return (pc > ph);
}
void teste(char *expr , Pilha *p){
    int i = 0;
    char c;

    empilha(p,'(');
    do{
        c = expr[i];
        if(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9'){
            printf("%c",c);
        }
        else if ( c == '('){
            empilha(p,c);
        }
        else if( c == ')' || c == '\0'){
            do{
                desempilha(p);
                if( p->vet[p->topo] != '('){
                    printf("%c",p->vet[p->topo]);
                }
            }while(p->vet[p->topo] != '(');
        }
        else if(c == '+' || c == '-' ||
            c == '*' || c == '/' ||
            c == '^' ){
                while(1){
                    desempilha(p);
                    if(prioridade(c,p->vet[p->topo])){
                        empilha(p,p->vet[p->topo]);
                        empilha(p,c);
                        break;
                    }else{
                        printf("%c",p->vet[p->topo]);
                    }
                }
        }
        i++;

    }while (c != '\0');
    printf("\n");
    liberaPilha(p);
}


int main(){

    int n, cont = 0;
    char expr[301];
    scanf("%d",&n);

    while(cont < n){
        Pilha *p = criaPilha();
        scanf("%s",expr);
        teste(expr,p);
        cont++;
    }




    return 0;
}
